 *Specify the kinds of objects to create using a prototypical instance, 
   and create new objects by copying this prototype.
   
 *In this design pattern, an instance of actual object (i.e. prototype) is created on starting, and 
  thereafter whenever a new instance is required, this prototype is cloned to have another instance.
  
  *Important: Please ensure that you want to deep clone or shallow clone your prototype because both will
    have different behavior on runtime.
    
  *Prototypes are useful when object initialization is expensive, and you anticipate few variations on the
   initialization parameters. In this context, Prototype can avoid expensive "creation from scratch", 
   and support cheap cloning of a pre-initialized prototype.